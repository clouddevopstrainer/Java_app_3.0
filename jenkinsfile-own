pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'preetz1303/april-new:latest'
        DOCKERHUB_CREDENTIALS = 'dockerhub'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/clouddevopstrainer/Java_app_3.0.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('Static code analysis: Sonarqube') {
            steps {
                withSonarQubeEnv('sonar-token') {
                    sh 'mvn clean package sonar:sonar'
                }
            }
        }

        stage('Quality Gate Status Check : Sonarqube') {
    steps {
        timeout(time: 5, unit: 'MINUTES') {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                waitForQualityGate abortPipeline: false
            }
        }
    }
}

        stage('Maven Build : maven') {
            steps {
                sh 'mvn package -DskipTests'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: "${DOCKERHUB_CREDENTIALS}") {
                        sh "docker build -t april-new ."
                        sh "docker tag april-new $DOCKER_IMAGE"
                    }
                }
            }
        }

        stage('Docker Image Scan: trivy') {
            steps {
                sh "trivy image $DOCKER_IMAGE"
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", passwordVariable: 'pass', usernameVariable: 'user')]) {
                        sh "echo ${pass} | docker login -u ${user} --password-stdin"
                        sh "docker push $DOCKER_IMAGE"
                    }
                }
            }
        }
    }
}
